// ********RoostGPT********
/*
Test generated by RoostGPT for test PublicRepoTest using AI Type Open AI and AI Model gpt-4

1. Scenario: Test with a point at the origin (0,0) and a slope of 0. The expected result should be 0 (y-intercept at the origin).

2. Scenario: Test with a point at the origin (0,0) and a positive slope. The expected result should be 0 (y-intercept at the origin).

3. Scenario: Test with a point at the origin (0,0) and a negative slope. The expected result should be 0 (y-intercept at the origin).

4. Scenario: Test with a point not at the origin and a slope of 0. The expected result should be the y-coordinate of the point (y-intercept at the given y-coordinate).

5. Scenario: Test with a point not at the origin and a positive slope. The expected result should be calculated by the formula y - mx.

6. Scenario: Test with a point not at the origin and a negative slope. The expected result should be calculated by the formula y - mx.

7. Scenario: Test with a point where x is negative and y is positive, and a positive slope. The expected result should be calculated by the formula y - mx.

8. Scenario: Test with a point where x is positive and y is negative, and a negative slope. The expected result should be calculated by the formula y - mx.

9. Scenario: Test with a point where both x and y are negative, and a positive slope. The expected result should be calculated by the formula y - mx.

10. Scenario: Test with a point where both x and y are negative, and a negative slope. The expected result should be calculated by the formula y - mx.

11. Scenario: Test with a point where both x and y are positive, and a slope is a large positive number. The expected result should be calculated by the formula y - mx.

12. Scenario: Test with a point where both x and y are positive, and a slope is a large negative number. The expected result should be calculated by the formula y - mx.

13. Scenario: Test when the point is nil. The function should handle this case appropriately.
*/

// ********RoostGPT********
package geometry

import (
	"math"
	"testing"
)

func TestYIntercept_1564b1e48f(t *testing.T) {
	// Test data structure
	tests := []struct {
		name  string
		point *Point
		slope float64
		want  float64
	}{
		{
			name:  "Origin and slope 0",
			point: &Point{0, 0},
			slope: 0,
			want:  0,
		},
		{
			name:  "Origin and positive slope",
			point: &Point{0, 0},
			slope: 1,
			want:  0,
		},
		{
			name:  "Origin and negative slope",
			point: &Point{0, 0},
			slope: -1,
			want:  0,
		},
		{
			name:  "Non-origin and slope 0",
			point: &Point{1, 1},
			slope: 0,
			want:  1,
		},
		{
			name:  "Non-origin and positive slope",
			point: &Point{2, 3},
			slope: 1,
			want:  1,
		},
		{
			name:  "Non-origin and negative slope",
			point: &Point{2, 3},
			slope: -1,
			want:  5,
		},
		{
			name:  "Negative x and positive y, positive slope",
			point: &Point{-2, 3},
			slope: 1,
			want:  5,
		},
		{
			name:  "Positive x and negative y, negative slope",
			point: &Point{2, -3},
			slope: -1,
			want:  -5,
		},
		{
			name:  "Negative x and y, positive slope",
			point: &Point{-2, -3},
			slope: 1,
			want:  -1,
		},
		{
			name:  "Negative x and y, negative slope",
			point: &Point{-2, -3},
			slope: -1,
			want:  -5,
		},
		{
			name:  "Positive x and y, large positive slope",
			point: &Point{2, 3},
			slope: math.MaxFloat64,
			want:  -math.MaxFloat64,
		},
		{
			name:  "Positive x and y, large negative slope",
			point: &Point{2, 3},
			slope: -math.MaxFloat64,
			want:  math.MaxFloat64,
		},
		{
			name:  "Nil point",
			point: nil,
			slope: 1,
			want:  math.NaN(),
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got := YIntercept(tt.point, tt.slope)
			if (math.IsNaN(got) && !math.IsNaN(tt.want)) || (!math.IsNaN(got) && math.IsNaN(tt.want)) || (!math.IsNaN(got) && !math.IsNaN(tt.want) && got != tt.want) {
				t.Errorf("YIntercept() = %v, want %v", got, tt.want)
			}
		})
	}
}
