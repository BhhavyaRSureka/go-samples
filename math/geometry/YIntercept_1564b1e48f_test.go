// ********RoostGPT********
/*
Test generated by RoostGPT for test PublicRepoTest using AI Type Open AI and AI Model gpt-4

1. Scenario: Test with a point at the origin (0,0) and a slope of 0. The expected result should be 0 (y-intercept at origin).

2. Scenario: Test with a point at the origin (0,0) and a slope of 1. The expected result should be 0 (y-intercept at origin).

3. Scenario: Test with a point at the origin (0,0) and a negative slope. The expected result should be 0 (y-intercept at origin).

4. Scenario: Test with a point not at the origin and a slope of 0. The expected result should be the y-coordinate of the point (y-intercept at the y-coordinate of the point).

5. Scenario: Test with a point not at the origin and a positive slope. The expected result should be the y-coordinate minus the product of the slope and the x-coordinate.

6. Scenario: Test with a point not at the origin and a negative slope. The expected result should be the y-coordinate minus the product of the slope and the x-coordinate.

7. Scenario: Test with a point on the y-axis (x=0) and any slope. The expected result should be the y-coordinate of the point (y-intercept at the y-coordinate of the point).

8. Scenario: Test with a point on the x-axis (y=0) and any slope. The expected result should be 0 (y-intercept at origin).

9. Scenario: Test with a point with both coordinates negative and a positive slope. The expected result should be the y-coordinate minus the product of the slope and the x-coordinate.

10. Scenario: Test with a point with both coordinates positive and a negative slope. The expected result should be the y-coordinate minus the product of the slope and the x-coordinate.

11. Scenario: Test with a point with both coordinates negative and a negative slope. The expected result should be the y-coordinate minus the product of the slope and the x-coordinate.

12. Scenario: Test with a point with both coordinates positive and a positive slope. The expected result should be the y-coordinate minus the product of the slope and the x-coordinate.

13. Scenario: Test with large values for coordinates and slope. This will test if the function can handle large numbers.

14. Scenario: Test with very small, non-zero values for coordinates and slope. This will test if the function can handle small numbers. 

15. Scenario: Test with nil point. This should return an error or exception. 

16. Scenario: Test with infinite slope. This should return an error or exception. 

17. Scenario: Test with NaN slope. This should return an error or exception. 

18. Scenario: Test with NaN coordinates. This should return an error or exception. 

19. Scenario: Test with Infinite coordinates. This should return an error or exception.
*/

// ********RoostGPT********
package geometry

import (
	"math"
	"testing"
)

func TestYIntercept_1564b1e48f(t *testing.T) {
	tests := []struct {
		name    string
		point   *Point
		slope   float64
		want    float64
		wantErr bool
	}{
		{
			name:    "Test with a point at the origin (0,0) and a slope of 0",
			point:   &Point{0, 0},
			slope:   0,
			want:    0,
			wantErr: false,
		},
		{
			name:    "Test with a point at the origin (0,0) and a slope of 1",
			point:   &Point{0, 0},
			slope:   1,
			want:    0,
			wantErr: false,
		},
		{
			name:    "Test with a point at the origin (0,0) and a negative slope",
			point:   &Point{0, 0},
			slope:   -1,
			want:    0,
			wantErr: false,
		},
		{
			name:    "Test with a point not at the origin and a slope of 0",
			point:   &Point{1, 1},
			slope:   0,
			want:    1,
			wantErr: false,
		},
		{
			name:    "Test with a point not at the origin and a positive slope",
			point:   &Point{1, 2},
			slope:   1,
			want:    1,
			wantErr: false,
		},
		{
			name:    "Test with a point not at the origin and a negative slope",
			point:   &Point{1, 2},
			slope:   -1,
			want:    3,
			wantErr: false,
		},
		{
			name:    "Test with a point on the y-axis (x=0) and any slope",
			point:   &Point{0, 2},
			slope:   1,
			want:    2,
			wantErr: false,
		},
		{
			name:    "Test with a point on the x-axis (y=0) and any slope",
			point:   &Point{2, 0},
			slope:   1,
			want:    0,
			wantErr: false,
		},
		{
			name:    "Test with a point with both coordinates negative and a positive slope",
			point:   &Point{-1, -1},
			slope:   1,
			want:    0,
			wantErr: false,
		},
		{
			name:    "Test with a point with both coordinates positive and a negative slope",
			point:   &Point{1, 1},
			slope:   -1,
			want:    2,
			wantErr: false,
		},
		{
			name:    "Test with a point with both coordinates negative and a negative slope",
			point:   &Point{-1, -1},
			slope:   -1,
			want:    -2,
			wantErr: false,
		},
		{
			name:    "Test with a point with both coordinates positive and a positive slope",
			point:   &Point{1, 1},
			slope:   1,
			want:    0,
			wantErr: false,
		},
		{
			name:    "Test with large values for coordinates and slope",
			point:   &Point{1e10, 1e10},
			slope:   1e10,
			want:    0,
			wantErr: false,
		},
		{
			name:    "Test with very small, non-zero values for coordinates and slope",
			point:   &Point{1e-10, 1e-10},
			slope:   1e-10,
			want:    0,
			wantErr: false,
		},
		{
			name:    "Test with nil point",
			point:   nil,
			slope:   1,
			want:    0,
			wantErr: true,
		},
		{
			name:    "Test with infinite slope",
			point:   &Point{1, 1},
			slope:   math.Inf(1),
			want:    -math.Inf(1),
			wantErr: false,
		},
		{
			name:    "Test with NaN slope",
			point:   &Point{1, 1},
			slope:   math.NaN(),
			want:    math.NaN(),
			wantErr: false,
		},
		{
			name:    "Test with NaN coordinates",
			point:   &Point{math.NaN(), math.NaN()},
			slope:   1,
			want:    math.NaN(),
			wantErr: false,
		},
		{
			name:    "Test with Infinite coordinates",
			point:   &Point{math.Inf(1), math.Inf(1)},
			slope:   1,
			want:    math.NaN(),
			wantErr: false,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if tt.point == nil && !tt.wantErr {
				t.Fatal("Expected error, got none")
			}
			if got := YIntercept(tt.point, tt.slope); !almostEqual(got, tt.want) || (tt.wantErr && got != 0) {
				t.Errorf("YIntercept() = %v, want %v", got, tt.want)
			}
		})
	}
}

func almostEqual(a, b float64) bool {
	return math.Abs(a-b) <= 1e-9
}
