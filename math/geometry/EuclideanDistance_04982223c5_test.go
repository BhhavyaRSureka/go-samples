// ********RoostGPT********
/*
Test generated by RoostGPT for test PublicRepoTest using AI Type Open AI and AI Model gpt-4

1. Test when `p1` and `p2` are both empty. The function should return 0 and no error.

2. Test when `p1` is empty and `p2` is not. The function should return an error indicating dimension mismatch.

3. Test when `p1` is not empty and `p2` is empty. The function should return an error indicating dimension mismatch.

4. Test when `p1` and `p2` have different lengths. The function should return an error indicating dimension mismatch.

5. Test when `p1` and `p2` have the same lengths but different values. The function should return the correct Euclidean distance and no error.

6. Test when `p1` and `p2` are identical. The function should return 0 and no error.

7. Test when `p1` and `p2` have negative values. The function should return the correct Euclidean distance and no error.

8. Test when `p1` and `p2` have a mix of negative and positive values. The function should return the correct Euclidean distance and no error.

9. Test when `p1` and `p2` have very large values. The function should return the correct Euclidean distance and no error.

10. Test when `p1` and `p2` have very small values. The function should return the correct Euclidean distance and no error.

11. Test when `p1` and `p2` have decimal values. The function should return the correct Euclidean distance and no error.
*/

// ********RoostGPT********
package geometry

import (
	"math"
	"testing"
)

func TestEuclideanDistance_04982223c5(t *testing.T) {
	var tests = []struct {
		p1   EuclideanPoint
		p2   EuclideanPoint
		want float64
		err  error
	}{
		{[]float64{}, []float64{}, 0, nil},
		{[]float64{}, []float64{1, 2, 3}, -1, ErrDimMismatch},
		{[]float64{1, 2, 3}, []float64{}, -1, ErrDimMismatch},
		{[]float64{1, 2, 3}, []float64{4, 5}, -1, ErrDimMismatch},
		{[]float64{1, 2, 3}, []float64{4, 5, 6}, 5.196152, nil},
		{[]float64{1, 2, 3}, []float64{1, 2, 3}, 0, nil},
		{[]float64{-1, -2, -3}, []float64{-4, -5, -6}, 5.196152, nil},
		{[]float64{-1, 2, -3}, []float64{4, -5, 6}, 10.392305, nil},
		{[]float64{1e10, 2e10, 3e10}, []float64{4e10, 5e10, 6e10}, 5.196152e10, nil},
		{[]float64{1e-10, 2e-10, 3e-10}, []float64{4e-10, 5e-10, 6e-10}, 5.196152e-10, nil},
		{[]float64{1.1, 2.2, 3.3}, []float64{4.4, 5.5, 6.6}, 5.715476, nil},
	}
	for _, tt := range tests {
		got, err := EuclideanDistance(tt.p1, tt.p2)
		if (err != nil) != (tt.err != nil) {
			t.Fatalf("EuclideanDistance(%v, %v) error = %v, want = %v", tt.p1, tt.p2, err, tt.err)
		}
		if math.Abs(got-tt.want) > 1e-6 {
			t.Errorf("EuclideanDistance(%v, %v) = %v, want = %v", tt.p1, tt.p2, got, tt.want)
		}
	}
}
