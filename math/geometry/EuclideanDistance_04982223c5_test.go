// ********RoostGPT********
/*
Test generated by RoostGPT for test PublicRepoTest using AI Type Open AI and AI Model gpt-4

1. Test when `p1` and `p2` are both empty. The function should return 0 and no error.

2. Test when `p1` is empty and `p2` is not. The function should return -1 and an error indicating a mismatch in dimensions.

3. Test when `p2` is empty and `p1` is not. The function should return -1 and an error indicating a mismatch in dimensions.

4. Test when `p1` and `p2` both have one dimension and their values are equal. The function should return 0 and no error.

5. Test when `p1` and `p2` both have one dimension and their values are different. The function should return the absolute difference between the two values and no error.

6. Test when `p1` and `p2` have more than one dimension and their values are equal. The function should return 0 and no error.

7. Test when `p1` and `p2` have more than one dimension and their values are different. The function should return the Euclidean distance between the two points and no error.

8. Test when `p1` and `p2` have different dimensions. The function should return -1 and an error indicating a mismatch in dimensions.

9. Test when `p1` and `p2` contain extremely large values. The function should handle this without overflow.

10. Test when `p1` and `p2` contain extremely small values. The function should handle this without underflow.

11. Test when `p1` and `p2` contain a mix of positive and negative values. The function should correctly calculate the Euclidean distance.

12. Test when `p1` and `p2` contain NaN or infinite values. The function should return an appropriate value or error.

13. Test the performance of the function when `p1` and `p2` contain a large number of dimensions. The function should return the result in a reasonable amount of time.

14. Test the function with concurrent calls to ensure the function is thread-safe.
*/

// ********RoostGPT********
package geometry

import (
	"errors"
	"math"
	"testing"
)

var ErrDimMismatch = errors.New("dimension mismatch")

func TestEuclideanDistance_04982223c5(t *testing.T) {
	tests := []struct {
		name    string
		p1      EuclideanPoint
		p2      EuclideanPoint
		want    float64
		wantErr error
	}{
		{
			name:    "Test when p1 and p2 are both empty",
			p1:      EuclideanPoint{},
			p2:      EuclideanPoint{},
			want:    0,
			wantErr: nil,
		},
		{
			name:    "Test when p1 is empty and p2 is not",
			p1:      EuclideanPoint{},
			p2:      EuclideanPoint{1, 2, 3},
			want:    -1,
			wantErr: ErrDimMismatch,
		},
		{
			name:    "Test when p2 is empty and p1 is not",
			p1:      EuclideanPoint{1, 2, 3},
			p2:      EuclideanPoint{},
			want:    -1,
			wantErr: ErrDimMismatch,
		},
		{
			name:    "Test when p1 and p2 both have one dimension and their values are equal",
			p1:      EuclideanPoint{1},
			p2:      EuclideanPoint{1},
			want:    0,
			wantErr: nil,
		},
		{
			name:    "Test when p1 and p2 both have one dimension and their values are different",
			p1:      EuclideanPoint{1},
			p2:      EuclideanPoint{2},
			want:    1,
			wantErr: nil,
		},
		{
			name:    "Test when p1 and p2 have more than one dimension and their values are equal",
			p1:      EuclideanPoint{1, 2, 3},
			p2:      EuclideanPoint{1, 2, 3},
			want:    0,
			wantErr: nil,
		},
		{
			name:    "Test when p1 and p2 have more than one dimension and their values are different",
			p1:      EuclideanPoint{1, 2, 3},
			p2:      EuclideanPoint{4, 5, 6},
			want:    math.Sqrt(27),
			wantErr: nil,
		},
		{
			name:    "Test when p1 and p2 have different dimensions",
			p1:      EuclideanPoint{1, 2},
			p2:      EuclideanPoint{1, 2, 3},
			want:    -1,
			wantErr: ErrDimMismatch,
		},
		{
			name:    "Test when p1 and p2 contain extremely large values",
			p1:      EuclideanPoint{1e300, 1e300},
			p2:      EuclideanPoint{1e300, 1e300},
			want:    0,
			wantErr: nil,
		},
		{
			name:    "Test when p1 and p2 contain extremely small values",
			p1:      EuclideanPoint{1e-300, 1e-300},
			p2:      EuclideanPoint{1e-300, 1e-300},
			want:    0,
			wantErr: nil,
		},
		{
			name:    "Test when p1 and p2 contain a mix of positive and negative values",
			p1:      EuclideanPoint{-1, -2, -3},
			p2:      EuclideanPoint{1, 2, 3},
			want:    math.Sqrt(56),
			wantErr: nil,
		},
		{
			name:    "Test when p1 and p2 contain NaN or infinite values",
			p1:      EuclideanPoint{math.NaN(), math.Inf(1)},
			p2:      EuclideanPoint{math.NaN(), math.Inf(1)},
			want:    math.NaN(),
			wantErr: nil,
		},
		{
			name:    "Test the performance of the function when p1 and p2 contain a large number of dimensions",
			p1:      EuclideanPoint(make([]float64, 1000000)),
			p2:      EuclideanPoint(make([]float64, 1000000)),
			want:    0,
			wantErr: nil,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := EuclideanDistance(tt.p1, tt.p2)
			if (err != nil) != (tt.wantErr != nil) || (err != nil && err.Error() != tt.wantErr.Error()) {
				t.Errorf("EuclideanDistance() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if math.Abs(got-tt.want) > 1e-9 {
				t.Errorf("EuclideanDistance() = %v, want %v", got, tt.want)
			}
		})
	}
}
