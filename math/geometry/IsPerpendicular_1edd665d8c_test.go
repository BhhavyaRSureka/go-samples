// ********RoostGPT********
/*
Test generated by RoostGPT for test PublicRepoTest using AI Type Open AI and AI Model gpt-4

Test Scenario 1:
Test when both lines are perpendicular. 
Input: Two lines that form a 90-degree angle. 
Expected Output: The function should return true.

Test Scenario 2:
Test when both lines are parallel.
Input: Two lines that are parallel to each other.
Expected Output: The function should return false.

Test Scenario 3:
Test when the lines form an obtuse angle.
Input: Two lines that form an angle greater than 90 degrees.
Expected Output: The function should return false.

Test Scenario 4:
Test when the lines form an acute angle.
Input: Two lines that form an angle less than 90 degrees.
Expected Output: The function should return false.

Test Scenario 5:
Test when one or both lines are a point (i.e., the start and end points are the same).
Input: One or both lines are points.
Expected Output: The function should handle this exception appropriately, possibly by returning false.

Test Scenario 6:
Test when the points of the lines have negative coordinates.
Input: Two lines with negative coordinates that are perpendicular.
Expected Output: The function should return true.

Test Scenario 7:
Test when one or both lines are vertical.
Input: One or both lines are vertical.
Expected Output: The function should handle this scenario appropriately.

Test Scenario 8:
Test when one or both lines are horizontal.
Input: One or both lines are horizontal.
Expected Output: The function should handle this scenario appropriately.

Test Scenario 9:
Test when the coordinates of the points are floating point numbers.
Input: Two lines with floating point coordinates that are perpendicular.
Expected Output: The function should return true.

Test Scenario 10:
Test with zero values.
Input: Lines with zero coordinates.
Expected Output: The function should handle this scenario appropriately.
*/

// ********RoostGPT********
package geometry

import (
	"testing"
)

func TestIsPerpendicular_1edd665d8c(t *testing.T) {
	tests := []struct {
		name string
		l1   *Line
		l2   *Line
		want bool
	}{
		{
			name: "Test when both lines are perpendicular",
			l1:   &Line{Point{0, 0}, Point{1, 1}},
			l2:   &Line{Point{0, 0}, Point{1, -1}},
			want: true,
		},
		{
			name: "Test when both lines are parallel",
			l1:   &Line{Point{0, 0}, Point{1, 1}},
			l2:   &Line{Point{1, 1}, Point{2, 2}},
			want: false,
		},
		{
			name: "Test when the lines form an obtuse angle",
			l1:   &Line{Point{0, 0}, Point{1, 1}},
			l2:   &Line{Point{1, 1}, Point{2, -1}},
			want: false,
		},
		{
			name: "Test when the lines form an acute angle",
			l1:   &Line{Point{0, 0}, Point{1, 1}},
			l2:   &Line{Point{1, 1}, Point{2, 1}},
			want: false,
		},
		{
			name: "Test when one or both lines are a point",
			l1:   &Line{Point{1, 1}, Point{1, 1}},
			l2:   &Line{Point{0, 0}, Point{1, 1}},
			want: false,
		},
		{
			name: "Test when the points of the lines have negative coordinates",
			l1:   &Line{Point{-1, -1}, Point{-2, -2}},
			l2:   &Line{Point{-1, -1}, Point{-2, 2}},
			want: true,
		},
		{
			name: "Test when one or both lines are vertical",
			l1:   &Line{Point{0, 1}, Point{0, -1}},
			l2:   &Line{Point{1, 1}, Point{2, 2}},
			want: false,
		},
		{
			name: "Test when one or both lines are horizontal",
			l1:   &Line{Point{0, 0}, Point{1, 0}},
			l2:   &Line{Point{0, 0}, Point{0, 1}},
			want: true,
		},
		{
			name: "Test when the coordinates of the points are floating point numbers",
			l1:   &Line{Point{0, 0}, Point{1.5, 1.5}},
			l2:   &Line{Point{0, 0}, Point{1.5, -1.5}},
			want: true,
		},
		{
			name: "Test with zero values",
			l1:   &Line{Point{0, 0}, Point{0, 0}},
			l2:   &Line{Point{0, 0}, Point{0, 0}},
			want: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := IsPerpendicular(tt.l1, tt.l2); got != tt.want {
				t.Errorf("IsPerpendicular() = %v, want %v", got, tt.want)
			}
		})
	}
}
