// ********RoostGPT********
/*
Test generated by RoostGPT for test PublicRepoTest using AI Type Open AI and AI Model gpt-4

Test Scenario 1:
Test when both lines are perpendicular. 
Input: (0,0)-(0,1) and (0,0)-(1,0)
Expected output: true

Test Scenario 2:
Test when both lines are not perpendicular. 
Input: (0,0)-(1,1) and (0,0)-(1,0)
Expected output: false

Test Scenario 3:
Test when both lines are parallel. 
Input: (0,0)-(1,1) and (2,2)-(3,3)
Expected output: false

Test Scenario 4:
Test when both lines are identical. 
Input: (0,0)-(1,1) and (0,0)-(1,1)
Expected output: false

Test Scenario 5:
Test when one line is a point.
Input: (0,0)-(0,0) and (0,0)-(1,0)
Expected output: false

Test Scenario 6:
Test when both lines are points.
Input: (0,0)-(0,0) and (0,0)-(0,0)
Expected output: false

Test Scenario 7:
Test when both lines are on the x-axis. 
Input: (0,0)-(1,0) and (2,0)-(3,0)
Expected output: false

Test Scenario 8:
Test when both lines are on the y-axis. 
Input: (0,0)-(0,1) and (0,2)-(0,3)
Expected output: false

Test Scenario 9:
Test when lines are perpendicular but not intersecting.
Input: (0,0)-(0,1) and (1,0)-(2,0)
Expected output: true

Test Scenario 10:
Test when both lines are vertical. 
Input: (0,0)-(0,1) and (1,0)-(1,1)
Expected output: false

Test Scenario 11:
Test when both lines are horizontal. 
Input: (0,0)-(1,0) and (0,1)-(1,1)
Expected output: false

Test Scenario 12:
Test when lines are perpendicular and intersecting at a point other than origin.
Input: (1,1)-(1,2) and (1,1)-(2,1)
Expected output: true

Test Scenario 13:
Test when lines are negative slopes and perpendicular.
Input: (0,0)-(1,1) and (0,0)-(1,-1)
Expected output: true

Test Scenario 14:
Test when lines are negative slopes and not perpendicular.
Input: (0,0)-(1,1) and (0,0)-(2,-1)
Expected output: false
*/

// ********RoostGPT********
package geometry

import (
	"testing"
)

func TestIsPerpendicular_1edd665d8c(t *testing.T) {
	tests := []struct {
		name string
		l1   Line
		l2   Line
		want bool
	}{
		{
			name: "Test when both lines are perpendicular",
			l1:   Line{Point{0, 0}, Point{0, 1}},
			l2:   Line{Point{0, 0}, Point{1, 0}},
			want: true,
		},
		{
			name: "Test when both lines are not perpendicular",
			l1:   Line{Point{0, 0}, Point{1, 1}},
			l2:   Line{Point{0, 0}, Point{1, 0}},
			want: false,
		},
		{
			name: "Test when both lines are parallel",
			l1:   Line{Point{0, 0}, Point{1, 1}},
			l2:   Line{Point{2, 2}, Point{3, 3}},
			want: false,
		},
		{
			name: "Test when both lines are identical",
			l1:   Line{Point{0, 0}, Point{1, 1}},
			l2:   Line{Point{0, 0}, Point{1, 1}},
			want: false,
		},
		{
			name: "Test when one line is a point",
			l1:   Line{Point{0, 0}, Point{0, 0}},
			l2:   Line{Point{0, 0}, Point{1, 0}},
			want: false,
		},
		{
			name: "Test when both lines are points",
			l1:   Line{Point{0, 0}, Point{0, 0}},
			l2:   Line{Point{0, 0}, Point{0, 0}},
			want: false,
		},
		{
			name: "Test when both lines are on the x-axis",
			l1:   Line{Point{0, 0}, Point{1, 0}},
			l2:   Line{Point{2, 0}, Point{3, 0}},
			want: false,
		},
		{
			name: "Test when both lines are on the y-axis",
			l1:   Line{Point{0, 0}, Point{0, 1}},
			l2:   Line{Point{0, 2}, Point{0, 3}},
			want: false,
		},
		{
			name: "Test when lines are perpendicular but not intersecting",
			l1:   Line{Point{0, 0}, Point{0, 1}},
			l2:   Line{Point{1, 0}, Point{2, 0}},
			want: true,
		},
		{
			name: "Test when both lines are vertical",
			l1:   Line{Point{0, 0}, Point{0, 1}},
			l2:   Line{Point{1, 0}, Point{1, 1}},
			want: false,
		},
		{
			name: "Test when both lines are horizontal",
			l1:   Line{Point{0, 0}, Point{1, 0}},
			l2:   Line{Point{0, 1}, Point{1, 1}},
			want: false,
		},
		{
			name: "Test when lines are perpendicular and intersecting at a point other than origin",
			l1:   Line{Point{1, 1}, Point{1, 2}},
			l2:   Line{Point{1, 1}, Point{2, 1}},
			want: true,
		},
		{
			name: "Test when lines are negative slopes and perpendicular",
			l1:   Line{Point{0, 0}, Point{1, 1}},
			l2:   Line{Point{0, 0}, Point{1, -1}},
			want: true,
		},
		{
			name: "Test when lines are negative slopes and not perpendicular",
			l1:   Line{Point{0, 0}, Point{1, 1}},
			l2:   Line{Point{0, 0}, Point{2, -1}},
			want: false,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := IsPerpendicular(&tt.l1, &tt.l2); got != tt.want {
				t.Errorf("IsPerpendicular() = %v, want %v", got, tt.want)
			}
		})
	}
}
